{
  "_args": [
    [
      {
        "raw": "sequelize-auto",
        "scope": null,
        "escapedName": "sequelize-auto",
        "name": "sequelize-auto",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/dianbagus/NODE"
    ]
  ],
  "_from": "sequelize-auto@latest",
  "_id": "sequelize-auto@0.4.29",
  "_inCache": true,
  "_location": "/sequelize-auto",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sequelize-auto-0.4.29.tgz_1508776830249_0.2413518112152815"
  },
  "_npmUser": {
    "name": "durango",
    "email": "me@danieldurante.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {
    "bluebird": "3.5.1",
    "depd": "1.1.2",
    "inflection": "1.12.0",
    "lodash": "4.17.5",
    "moment": "2.20.1",
    "moment-timezone": "0.5.14",
    "retry-as-promised": "2.3.2",
    "semver": "5.5.0",
    "terraformer-wkt-parser": "1.1.2",
    "toposort-class": "1.0.1"
  },
  "_requested": {
    "raw": "sequelize-auto",
    "scope": null,
    "escapedName": "sequelize-auto",
    "name": "sequelize-auto",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sequelize-auto/-/sequelize-auto-0.4.29.tgz",
  "_shasum": "775267b4d15f821699414e1763108d1bd825ddca",
  "_shrinkwrap": null,
  "_spec": "sequelize-auto",
  "_where": "/home/dianbagus/NODE",
  "author": {
    "name": "Daniel Durante",
    "email": "me@danieldurante.com"
  },
  "bin": {
    "sequelize-auto": "bin/sequelize-auto"
  },
  "bugs": {
    "url": "https://github.com/sequelize/sequelize-auto/issues"
  },
  "dependencies": {
    "async": "^2.1.5",
    "eslint": "^4.3.0",
    "graceful-fs-extra": "^2.0.0",
    "mkdirp": "^0.5.1",
    "sequelize": "^3.30.2",
    "yargs": "^8.0.1"
  },
  "description": "Automatically generate bare sequelize models from your database.",
  "devDependencies": {
    "chai": "^4.0.1",
    "cross-env": "^5.0.0",
    "istanbul": "^0.4.5",
    "lcov-result-merger": "^1.2.0",
    "mkdirp": "^0.5.1",
    "mocha": "^4.0.0",
    "mysql": "^2.13.0",
    "nyc": "^11.0.1",
    "pg": "^6.1.5",
    "pg-hstore": "^2.3.2",
    "sqlite3": "^3.1.8",
    "tedious": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-0Ry8Z4MUIIT3N3fRmBU9QZPVIa+PEzqFxB90N2C2Jq76tPXkI850yUCF6FhP2NDCZAfKoRANVx3xlfDyiDN+Zg==",
    "shasum": "775267b4d15f821699414e1763108d1bd825ddca",
    "tarball": "https://registry.npmjs.org/sequelize-auto/-/sequelize-auto-0.4.29.tgz"
  },
  "engines": {
    "node": ">=0.10"
  },
  "gitHead": "40dfce6352eefe7fa8dec1c71dd5127c37ac0a52",
  "homepage": "https://github.com/sequelize/sequelize-auto#readme",
  "keywords": [
    "mysql",
    "postgres",
    "sequelize",
    "sequelizejs",
    "mapper"
  ],
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "durango",
      "email": "me@danieldurante.com"
    }
  ],
  "name": "sequelize-auto",
  "nyc": {
    "exclude": [
      "**/test/**.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "# Sequelize-Auto\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/sequelize/sequelize-auto.svg)](https://greenkeeper.io/)\n\n[![Build Status](http://img.shields.io/travis/sequelize/sequelize-auto/master.svg)](https://travis-ci.org/sequelize/sequelize-auto) [![Build status](https://ci.appveyor.com/api/projects/status/bf9lb89rmpj6iveb?svg=true)](https://ci.appveyor.com/project/durango/sequelize-auto) [![Dependency Status](https://david-dm.org/sequelize/sequelize-auto.svg)](https://david-dm.org/sequelize/sequelize-auto) [![Code Climate](https://codeclimate.com/github/sequelize/sequelize-auto/badges/gpa.svg)](https://codeclimate.com/github/sequelize/sequelize-auto) [![Test Coverage](https://codeclimate.com/github/sequelize/sequelize-auto/badges/coverage.svg)](https://codeclimate.com/github/sequelize/sequelize-auto/coverage)\n\nAutomatically generate models for [SequelizeJS](https://github.com/sequelize/sequelize) via the command line.\n\n## Install\n\n    npm install -g sequelize-auto\n\n## Prerequisites\n\nYou will need to install the correct dialect binding globally before using sequelize-auto.\n\nExample for MySQL/MariaDB\n\n`npm install -g mysql`\n\nExample for Postgres\n\n`npm install -g pg pg-hstore`\n\nExample for Sqlite3\n\n`npm install -g sqlite`\n\nExample for MSSQL\n\n`npm install -g mssql`\n\n## Usage\n\n    [node] sequelize-auto -h <host> -d <database> -u <user> -x [password] -p [port]  --dialect [dialect] -c [/path/to/config] -o [/path/to/models] -t [tableName] -C\n\n    Options:\n      -h, --host        IP/Hostname for the database.   [required]\n      -d, --database    Database name.                  [required]\n      -u, --user        Username for database.\n      -x, --pass        Password for database.\n      -p, --port        Port number for database.\n      -c, --config      JSON file for Sequelize's constructor \"options\" flag object as defined here: https://sequelize.readthedocs.org/en/latest/api/sequelize/\n      -o, --output      What directory to place the models.\n      -e, --dialect     The dialect/engine that you're using: postgres, mysql, sqlite\n      -a, --additional  Path to a json file containing model definitions (for all tables) which are to be defined within a model's configuration parameter. For more info: https://sequelize.readthedocs.org/en/latest/docs/models-definition/#configuration\n      -t, --tables      Comma-separated names of tables to import\n      -T, --skip-tables Comma-separated names of tables to skip\n      -C, --camel       Use camel case to name models and fields\n      -n, --no-write    Prevent writing the models to disk.\n      -s, --schema      Database schema from which to retrieve tables\n      -z, --typescript  Output models as typescript with a definitions file.\n\n## Example\n\n    sequelize-auto -o \"./models\" -d sequelize_auto_test -h localhost -u my_username -p 5432 -x my_password -e postgres\n\nProduces a file/files such as ./models/Users.js which looks like:\n\n    /* jshint indent: 2 */\n\n    module.exports = function(sequelize, DataTypes) {\n      return sequelize.define('Users', {\n        id: {\n          type: DataTypes.INTEGER(11),\n          allowNull: false,\n          primaryKey: true,\n          autoIncrement: true\n        },\n        username: {\n          type: DataTypes.STRING,\n          allowNull: true\n        },\n        touchedAt: {\n          type: DataTypes.DATE,\n          allowNull: true\n        },\n        aNumber: {\n          type: DataTypes.INTEGER(11),\n          allowNull: true\n        },\n        bNumber: {\n          type: DataTypes.INTEGER(11),\n          allowNull: true\n        },\n        validateTest: {\n          type: DataTypes.INTEGER(11),\n          allowNull: true\n        },\n        validateCustom: {\n          type: DataTypes.STRING,\n          allowNull: false\n        },\n        dateAllowNullTrue: {\n          type: DataTypes.DATE,\n          allowNull: true\n        },\n        defaultValueBoolean: {\n          type: DataTypes.BOOLEAN,\n          allowNull: true,\n          defaultValue: '1'\n        },\n        createdAt: {\n          type: DataTypes.DATE,\n          allowNull: false\n        },\n        updatedAt: {\n          type: DataTypes.DATE,\n          allowNull: false\n        }\n      }, {\n        tableName: 'Users',\n        freezeTableName: true\n      });\n    };\n\n\nWhich makes it easy for you to simply [Sequelize.import](http://docs.sequelizejs.com/en/latest/docs/models-definition/#import) it.\n\n## Configuration options\n\nFor the `-c, --config` option the following JSON/configuration parameters are defined by Sequelize's `options` flag within the constructor. For more info:\n\n[https://sequelize.readthedocs.org/en/latest/api/sequelize/](https://sequelize.readthedocs.org/en/latest/api/sequelize/)\n\n## Programmatic API\n\n```js\nvar SequelizeAuto = require('sequelize-auto')\nvar auto = new SequelizeAuto('database', 'user', 'pass');\n\nauto.run(function (err) {\n  if (err) throw err;\n\n  console.log(auto.tables); // table list\n  console.log(auto.foreignKeys); // foreign key list\n});\n\nWith options:\nvar auto = new SequelizeAuto('database', 'user', 'pass', {\n    host: 'localhost',\n    dialect: 'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql',\n    directory: false, // prevents the program from writing to disk\n    port: 'port',\n    additional: {\n        timestamps: false\n        //...\n    },\n    tables: ['table1', 'table2', 'table3']\n    //...\n})\n```\n\n## Typescript\n\nAdd -z to cli options or `typescript: true` to programmatic options. Model usage in a ts file:\n\n```js\n// All models, can put in or extend to a db object at server init\nimport * as dbTables from './models/db.tables';\nconst tables = dbTables.getModels(sequelize); //:dbTables.ITable\ntables.Device.findAll\n// Single models\nimport * as dbDef from './models/db.d';\nconst devices:dbDef.DeviceModel = sequelize.import('./models/Device');\ndevices.findAll\n```\n\n## Testing\n\nYou must setup a database called `sequelize_auto_test` first, edit the `test/config.js` file accordingly, and then enter in any of the following:\n\n    # for all\n    npm run test\n\n    # mysql only\n    npm run test-mysql\n\n    # postgres only\n    npm run test-postgres\n\n    # postgres native only\n    npm run test-postgres-native\n\n    # sqlite only\n    npm run test-sqlite\n\n## Projects Using Sequelize-Auto\n\n* [Sequelizer](https://github.com/andyforever/sequelizer)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sequelize/sequelize-auto.git"
  },
  "scripts": {
    "clean-coverage": "rm -rf coverage && rm -rf coverage-*",
    "codeclimate": "npm run cover-all && npm run codeclimate-send && npm run clean-coverage",
    "codeclimate-send": "npm install -g codeclimate-test-reporter && CODECLIMATE_REPO_TOKEN=b9a25c5bf4c3875fb46ecb6d3a5f99e49f6872e6b92c074e5725d6dc2cd94f22 codeclimate-test-reporter < coverage/lcov.info",
    "cover": "rm -rf coverage && COVERAGE=true ./node_modules/.bin/nyc -r lcov npm run test",
    "cover-all": "npm run cover-mysql && npm run cover-postgres && npm run cover-postgres-native && npm run cover-sqlite && npm run merge-coverage",
    "cover-mysql": "DIALECT=mysql npm run cover && mv coverage coverage-mysql",
    "cover-postgres": "DIALECT=postgres npm run cover && mv coverage coverage-postgres",
    "cover-postgres-native": "DIALECT=postgres-native npm run cover && mv coverage coverage-postgres-native",
    "cover-sqlite": "DIALECT=sqlite npm run cover && mv coverage coverage-sqlite",
    "merge-coverage": "rm -rf coverage && mkdir coverage && ./node_modules/.bin/lcov-result-merger 'coverage-*/lcov.info' 'coverage/lcov.info'",
    "test": "mocha --globals setImmediate,clearImmediate,__core-js_shared__ --ui tdd --check-leaks --colors -t 15000 --reporter spec \"test/**/*.test.js\"",
    "test-mssql": "cross-env DIALECT=mssql npm run test",
    "test-mysql": "cross-env DIALECT=mysql npm run test",
    "test-postgres": "cross-env DIALECT=postgres npm run test",
    "test-sqlite": "cross-env DIALECT=sqlite npm run test"
  },
  "version": "0.4.29"
}
